(function() {
  var ENDS_IN_MODIFIER_REGEX, KEY_NAMES_BY_KEYBOARD_EVENT_CODE, KeyboardLayout, MATCH_TYPES, MODIFIERS, NON_CHARACTER_KEY_NAMES_BY_KEYBOARD_EVENT_KEY, WHITESPACE_REGEX, buildKeyboardEvent, calculateSpecificity, isASCIICharacter, isLatinCharacter, isLowerCaseCharacter, isUpperCaseCharacter, nonAltModifiedKeyForKeyboardEvent, normalizeKeystroke, parseKeystroke, usCharactersForKeyCode, usKeymap;

  calculateSpecificity = require('clear-cut').calculateSpecificity;

  KeyboardLayout = require('keyboard-layout');

  MODIFIERS = new Set(['ctrl', 'alt', 'shift', 'cmd']);

  ENDS_IN_MODIFIER_REGEX = /(ctrl|alt|shift|cmd)$/;

  WHITESPACE_REGEX = /\s+/;

  KEY_NAMES_BY_KEYBOARD_EVENT_CODE = {
    'Space': 'space',
    'Backspace': 'backspace'
  };

  NON_CHARACTER_KEY_NAMES_BY_KEYBOARD_EVENT_KEY = {
    'Control': 'ctrl',
    'Meta': 'cmd',
    'ArrowDown': 'down',
    'ArrowUp': 'up',
    'ArrowLeft': 'left',
    'ArrowRight': 'right'
  };

  MATCH_TYPES = {
    EXACT: 'exact',
    KEYDOWN_EXACT: 'keydownExact',
    PARTIAL: 'partial'
  };

  isASCIICharacter = function(character) {
    return (character != null) && character.length === 1 && character.charCodeAt(0) <= 127;
  };

  isLatinCharacter = function(character) {
    return (character != null) && character.length === 1 && character.charCodeAt(0) <= 0x024F;
  };

  isUpperCaseCharacter = function(character) {
    return (character != null) && character.length === 1 && character.toLowerCase() !== character;
  };

  isLowerCaseCharacter = function(character) {
    return (character != null) && character.length === 1 && character.toUpperCase() !== character;
  };

  usKeymap = null;

  usCharactersForKeyCode = function(code) {
    if (usKeymap == null) {
      usKeymap = require('./us-keymap');
    }
    return usKeymap[code];
  };

  exports.normalizeKeystrokes = function(keystrokes) {
    var keystroke, normalizedKeystroke, normalizedKeystrokes, _i, _len, _ref;
    normalizedKeystrokes = [];
    _ref = keystrokes.split(WHITESPACE_REGEX);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      keystroke = _ref[_i];
      if (normalizedKeystroke = normalizeKeystroke(keystroke)) {
        normalizedKeystrokes.push(normalizedKeystroke);
      } else {
        return false;
      }
    }
    return normalizedKeystrokes.join(' ');
  };

  normalizeKeystroke = function(keystroke) {
    var i, isKeyup, key, keys, modifiers, primaryKey, _i, _len;
    if (isKeyup = keystroke.startsWith('^')) {
      keystroke = keystroke.slice(1);
    }
    keys = parseKeystroke(keystroke);
    if (!keys) {
      return false;
    }
    primaryKey = null;
    modifiers = new Set;
    for (i = _i = 0, _len = keys.length; _i < _len; i = ++_i) {
      key = keys[i];
      if (MODIFIERS.has(key)) {
        modifiers.add(key);
      } else {
        if (i === keys.length - 1) {
          primaryKey = key;
        } else {
          return false;
        }
      }
    }
    if (isKeyup) {
      if (primaryKey != null) {
        primaryKey = primaryKey.toLowerCase();
      }
    } else {
      if (isUpperCaseCharacter(primaryKey)) {
        modifiers.add('shift');
      }
      if (modifiers.has('shift') && isLowerCaseCharacter(primaryKey)) {
        primaryKey = primaryKey.toUpperCase();
      }
    }
    keystroke = [];
    if (!isKeyup || (isKeyup && (primaryKey == null))) {
      if (modifiers.has('ctrl')) {
        keystroke.push('ctrl');
      }
      if (modifiers.has('alt')) {
        keystroke.push('alt');
      }
      if (modifiers.has('shift')) {
        keystroke.push('shift');
      }
      if (modifiers.has('cmd')) {
        keystroke.push('cmd');
      }
    }
    if (primaryKey != null) {
      keystroke.push(primaryKey);
    }
    keystroke = keystroke.join('-');
    if (isKeyup) {
      keystroke = "^" + keystroke;
    }
    return keystroke;
  };

  parseKeystroke = function(keystroke) {
    var character, index, keyStart, keys, _i, _len;
    keys = [];
    keyStart = 0;
    for (index = _i = 0, _len = keystroke.length; _i < _len; index = ++_i) {
      character = keystroke[index];
      if (character === '-') {
        if (index > keyStart) {
          keys.push(keystroke.substring(keyStart, index));
          keyStart = index + 1;
          if (keyStart === keystroke.length) {
            return false;
          }
        }
      }
    }
    if (keyStart < keystroke.length) {
      keys.push(keystroke.substring(keyStart));
    }
    return keys;
  };

  exports.keystrokeForKeyboardEvent = function(event) {
    var altKey, characters, code, ctrlKey, isNonCharacterKey, key, keystroke, metaKey, nonAltModifiedKey, shiftKey, _ref;
    key = event.key, code = event.code, ctrlKey = event.ctrlKey, altKey = event.altKey, shiftKey = event.shiftKey, metaKey = event.metaKey;
    if (key === 'Dead') {
      if (process.platform !== 'linux' && (characters = KeyboardLayout.getCurrentKeymap()[event.code])) {
        if (ctrlKey && altKey && shiftKey && (characters.withAltGraphShift != null)) {
          key = characters.withAltGraphShift;
        } else if (process.platform === 'darwin' && altKey && (characters.withAltGraph != null)) {
          key = characters.withAltGraph;
        } else if (process.platform === 'win32' && ctrlKey && altKey && (characters.withAltGraph != null)) {
          key = characters.withAltGraph;
        } else if (shiftKey && (characters.withShift != null)) {
          key = characters.withShift;
        } else if (characters.unmodified != null) {
          key = characters.unmodified;
        }
      }
    }
    if (KEY_NAMES_BY_KEYBOARD_EVENT_CODE[code] != null) {
      key = KEY_NAMES_BY_KEYBOARD_EVENT_CODE[code];
    }
    isNonCharacterKey = key.length > 1;
    if (isNonCharacterKey) {
      key = (_ref = NON_CHARACTER_KEY_NAMES_BY_KEYBOARD_EVENT_KEY[key]) != null ? _ref : key.toLowerCase();
    } else {
      if (altKey) {
        if (process.platform === 'darwin' && event.code) {
          nonAltModifiedKey = nonAltModifiedKeyForKeyboardEvent(event);
          if (ctrlKey || metaKey || !isASCIICharacter(key)) {
            key = nonAltModifiedKey;
          } else if (key !== nonAltModifiedKey) {
            altKey = false;
          }
        } else if (process.platform === 'win32' && ctrlKey && event.code) {
          nonAltModifiedKey = nonAltModifiedKeyForKeyboardEvent(event);
          if (metaKey) {
            key = nonAltModifiedKey;
          } else if (key !== nonAltModifiedKey) {
            ctrlKey = false;
            altKey = false;
          }
        } else if (process.platform === 'linux') {
          if (event.getModifierState('AltGraph')) {
            altKey = false;
          }
        }
      }
      if (!shiftKey) {
        key = key.toLowerCase();
      }
    }
    if ((key.length === 1 && !isLatinCharacter(key)) || (metaKey && KeyboardLayout.getCurrentKeyboardLayout() === 'com.apple.keylayout.DVORAK-QWERTYCMD')) {
      if (characters = usCharactersForKeyCode(event.code)) {
        if (event.shiftKey) {
          key = characters.withShift;
        } else {
          key = characters.unmodified;
        }
      }
    }
    keystroke = '';
    if (key === 'ctrl' || ctrlKey) {
      keystroke += 'ctrl';
    }
    if (key === 'alt' || altKey) {
      if (keystroke.length > 0) {
        keystroke += '-';
      }
      keystroke += 'alt';
    }
    if (key === 'shift' || (shiftKey && (isNonCharacterKey || (isLatinCharacter(key) && isUpperCaseCharacter(key))))) {
      if (keystroke) {
        keystroke += '-';
      }
      keystroke += 'shift';
    }
    if (key === 'cmd' || metaKey) {
      if (keystroke) {
        keystroke += '-';
      }
      keystroke += 'cmd';
    }
    if (!MODIFIERS.has(key)) {
      if (keystroke) {
        keystroke += '-';
      }
      keystroke += key;
    }
    if (event.type === 'keyup') {
      keystroke = normalizeKeystroke("^" + keystroke);
    }
    return keystroke;
  };

  nonAltModifiedKeyForKeyboardEvent = function(event) {
    var characters;
    if (event.code && (characters = KeyboardLayout.getCurrentKeymap()[event.code])) {
      if (event.shiftKey) {
        return characters.withShift;
      } else {
        return characters.unmodified;
      }
    }
  };

  exports.characterForKeyboardEvent = function(event) {
    if (!(event.ctrlKey || event.metaKey)) {
      return event.key;
    }
  };

  exports.calculateSpecificity = calculateSpecificity;

  exports.isBareModifier = function(keystroke) {
    return ENDS_IN_MODIFIER_REGEX.test(keystroke);
  };

  exports.keydownEvent = function(key, options) {
    return buildKeyboardEvent(key, 'keydown', options);
  };

  exports.keyupEvent = function(key, options) {
    return buildKeyboardEvent(key, 'keyup', options);
  };

  buildKeyboardEvent = function(key, eventType, _arg) {
    var alt, altKey, bubbles, cancelable, cmd, ctrl, ctrlKey, event, keyCode, location, metaKey, shift, shiftKey, target, _ref;
    _ref = _arg != null ? _arg : {}, ctrl = _ref.ctrl, shift = _ref.shift, alt = _ref.alt, cmd = _ref.cmd, keyCode = _ref.keyCode, target = _ref.target, location = _ref.location;
    ctrlKey = ctrl != null ? ctrl : false;
    altKey = alt != null ? alt : false;
    shiftKey = shift != null ? shift : false;
    metaKey = cmd != null ? cmd : false;
    bubbles = true;
    cancelable = true;
    event = new KeyboardEvent(eventType, {
      key: key,
      ctrlKey: ctrlKey,
      altKey: altKey,
      shiftKey: shiftKey,
      metaKey: metaKey,
      bubbles: bubbles,
      cancelable: cancelable
    });
    if (target != null) {
      Object.defineProperty(event, 'target', {
        get: function() {
          return target;
        }
      });
      Object.defineProperty(event, 'path', {
        get: function() {
          return [target];
        }
      });
    }
    return event;
  };

  exports.keystrokesMatch = function(bindingKeystrokes, userKeystrokes) {
    var bindingKeystroke, bindingKeystrokeIndex, bindingRemainderContainsOnlyKeyups, doesMatch, isPartialMatch, matchesNextUserKeystroke, userKeystrokeIndex, userKeystrokesHasKeydownEvent, _i, _len;
    userKeystrokeIndex = -1;
    userKeystrokesHasKeydownEvent = false;
    matchesNextUserKeystroke = function(bindingKeystroke) {
      var isKeydownEvent, userKeystroke;
      while (userKeystrokeIndex < userKeystrokes.length - 1) {
        userKeystrokeIndex += 1;
        userKeystroke = userKeystrokes[userKeystrokeIndex];
        isKeydownEvent = !userKeystroke.startsWith('^');
        if (isKeydownEvent) {
          userKeystrokesHasKeydownEvent = true;
        }
        if (bindingKeystroke === userKeystroke) {
          return true;
        } else if (isKeydownEvent) {
          return false;
        }
      }
      return null;
    };
    isPartialMatch = false;
    bindingRemainderContainsOnlyKeyups = true;
    bindingKeystrokeIndex = 0;
    for (_i = 0, _len = bindingKeystrokes.length; _i < _len; _i++) {
      bindingKeystroke = bindingKeystrokes[_i];
      if (!isPartialMatch) {
        doesMatch = matchesNextUserKeystroke(bindingKeystroke);
        if (doesMatch === false) {
          return false;
        } else if (doesMatch === null) {
          if (userKeystrokesHasKeydownEvent) {
            isPartialMatch = true;
          } else {
            return false;
          }
        }
      }
      if (isPartialMatch) {
        if (!bindingKeystroke.startsWith('^')) {
          bindingRemainderContainsOnlyKeyups = false;
        }
      }
    }
    if (userKeystrokeIndex < userKeystrokes.length - 1) {
      return false;
    }
    if (isPartialMatch && bindingRemainderContainsOnlyKeyups) {
      return MATCH_TYPES.KEYDOWN_EXACT;
    } else if (isPartialMatch) {
      return MATCH_TYPES.PARTIAL;
    } else {
      return MATCH_TYPES.EXACT;
    }
  };

}).call(this);
